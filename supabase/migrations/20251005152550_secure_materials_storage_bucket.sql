/*
  # Secure Materials Storage Bucket

  1. Changes
    - Remove public access from materials_files bucket
    - Add authenticated-only access with proper authorization
    - Restrict video access to signed URLs only
    - Keep non-video materials accessible with authentication

  2. Security
    - Videos require signed URLs (generated via Edge Function)
    - Other materials accessible to authenticated users with proper permissions
    - System admins have full access
    - Service role has full access for management

  IMPORTANT: This migration makes materials_files bucket private.
  Direct public URLs will stop working. Use signed URLs for videos.
*/

-- First, drop all existing public policies for materials_files bucket
DROP POLICY IF EXISTS "All 1q6z738_0" ON storage.objects;
DROP POLICY IF EXISTS "All 1q6z738_1" ON storage.objects;
DROP POLICY IF EXISTS "All 1q6z738_2" ON storage.objects;
DROP POLICY IF EXISTS "All 1q6z738_3" ON storage.objects;

-- Update bucket to be private (not public)
UPDATE storage.buckets
SET public = false
WHERE name = 'materials_files';

-- Policy 1: Authenticated users can SELECT (view) materials they have access to
-- This allows previewing non-video materials
CREATE POLICY "Authenticated users can view materials"
  ON storage.objects
  FOR SELECT
  TO authenticated
  USING (
    bucket_id = 'materials_files'
    AND (
      -- System admins can view all
      EXISTS (
        SELECT 1 FROM users
        WHERE users.auth_user_id = auth.uid()
        AND users.user_type = 'system_admin'
      )
      OR
      -- Teachers can view materials they created
      EXISTS (
        SELECT 1 FROM materials m
        JOIN teachers t ON t.id = m.created_by::uuid
        JOIN users u ON u.id = t.user_id AND u.auth_user_id = auth.uid()
        WHERE m.file_path = storage.objects.name
      )
      OR
      -- Students can view active materials (logged via access_logs)
      EXISTS (
        SELECT 1 FROM materials m
        JOIN students s ON s.user_id IN (
          SELECT id FROM users WHERE auth_user_id = auth.uid()
        )
        WHERE m.file_path = storage.objects.name
        AND m.status = 'active'
      )
    )
  );

-- Policy 2: Service role has full access for management operations
CREATE POLICY "Service role has full access to materials"
  ON storage.objects
  FOR ALL
  TO service_role
  USING (bucket_id = 'materials_files')
  WITH CHECK (bucket_id = 'materials_files');

-- Policy 3: Authenticated users (teachers/admins) can upload materials
CREATE POLICY "Authenticated users can upload materials"
  ON storage.objects
  FOR INSERT
  TO authenticated
  WITH CHECK (
    bucket_id = 'materials_files'
    AND (
      -- System admins can upload
      EXISTS (
        SELECT 1 FROM users
        WHERE users.auth_user_id = auth.uid()
        AND users.user_type = 'system_admin'
      )
      OR
      -- Teachers can upload
      EXISTS (
        SELECT 1 FROM teachers t
        JOIN users u ON u.id = t.user_id
        WHERE u.auth_user_id = auth.uid()
      )
      OR
      -- Entity admins can upload
      EXISTS (
        SELECT 1 FROM entity_users eu
        JOIN users u ON u.id = eu.user_id
        WHERE u.auth_user_id = auth.uid()
      )
    )
  );

-- Policy 4: Authenticated users can update their own uploaded materials
CREATE POLICY "Authenticated users can update own materials"
  ON storage.objects
  FOR UPDATE
  TO authenticated
  USING (
    bucket_id = 'materials_files'
    AND (
      -- System admins can update all
      EXISTS (
        SELECT 1 FROM users
        WHERE users.auth_user_id = auth.uid()
        AND users.user_type = 'system_admin'
      )
      OR
      -- Teachers can update materials they created
      EXISTS (
        SELECT 1 FROM materials m
        JOIN teachers t ON t.id = m.created_by::uuid
        JOIN users u ON u.id = t.user_id AND u.auth_user_id = auth.uid()
        WHERE m.file_path = storage.objects.name
      )
    )
  )
  WITH CHECK (bucket_id = 'materials_files');

-- Policy 5: Authenticated users can delete their own uploaded materials
CREATE POLICY "Authenticated users can delete own materials"
  ON storage.objects
  FOR DELETE
  TO authenticated
  USING (
    bucket_id = 'materials_files'
    AND (
      -- System admins can delete all
      EXISTS (
        SELECT 1 FROM users
        WHERE users.auth_user_id = auth.uid()
        AND users.user_type = 'system_admin'
      )
      OR
      -- Teachers can delete materials they created
      EXISTS (
        SELECT 1 FROM materials m
        JOIN teachers t ON t.id = m.created_by::uuid
        JOIN users u ON u.id = t.user_id AND u.auth_user_id = auth.uid()
        WHERE m.file_path = storage.objects.name
      )
    )
  );

-- Note: Videos should now only be accessed via signed URLs
-- generated by the generate-signed-video-url Edge Function
-- which provides time-limited, user-specific access
